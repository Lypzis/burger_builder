{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.css","components/Layout/Layout.css","containers/App.css","components/Burger/Burger.css","hoc/Aux.js","hoc/withClass.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Layout","content","App","Burger","aux","props","children","withClass","WrappedComponent","className","react_default","a","createElement","Aux","classes","BurgerIngredient","ingredient","this","type","Component","transformedIngredients","Object","keys","ingredients","map","ingKey","toConsumableArray","Array","_","index","Burger_BurgerIngredient_BurgerIngredient","key","BurgerBuilder","state","salad","bacon","cheese","meat","purchased","totalPrice","components_Burger_Burger","components_Layout_Layout","containers_BurgerBuilder_BurgerBuilder","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.471ddfd4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient__BreadBottom__HuxZP\",\"BreadTop\":\"BurgerIngredient__BreadTop__10-cT\",\"Seeds1\":\"BurgerIngredient__Seeds1__3xHtz\",\"Seeds2\":\"BurgerIngredient__Seeds2__1cUso\",\"Meat\":\"BurgerIngredient__Meat__13nAN\",\"Cheese\":\"BurgerIngredient__Cheese__1FxeY\",\"Salad\":\"BurgerIngredient__Salad__1iTJE\",\"Bacon\":\"BurgerIngredient__Bacon__3vrAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout__Layout__1SGjM\",\"content\":\"Layout__content__ciN7r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger__Burger__3K4F-\"};","// Auxiliary component that returns elements wrapped within.\nconst aux = props => props.children;\n\nexport default aux;","import React from 'react'\n\n// Returns a wrapped a component with a given style class.\n// the component has its properties and content preserved.  \nconst withClass = (WrappedComponent, className) => {\n    return props => (\n        <div className={className}>\n            <WrappedComponent {...props} />\n        </div>\n    );\n}\n\nexport default withClass;\n","import React from 'react';\n\nimport classes from './Layout.css';\n\nimport Aux from '../../hoc/Aux';\nimport withClass from '../../hoc/withClass';\n\nconst Layout = props => {\n    return (\n        <Aux>\n            <header><p>Toolbar, SideDrawer, Backdrop</p></header>\n            <main className={classes.content}>{props.children}</main>\n            <footer>Burger Builder Â© 2019 by Lypzis.</footer>\n        </Aux>\n    );\n}\n\nexport default withClass(Layout, classes.Layout);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './BurgerIngredient.css';\n\nclass BurgerIngredient extends Component {\n\n    render() {\n        let ingredient = null;\n\n        switch ( this.props.type ) {\n            case ('bread-bottom'):\n                ingredient = <div className={classes.BreadBottom}></div>;\n                break;\n            case ('bread-top'):\n                ingredient = (\n                    <div className={classes.BreadTop}>\n                        <div className={classes.Seeds1}></div>\n                        <div className={classes.Seeds2}></div>\n                    </div>\n                );\n                break;\n            case ('meat'):\n                ingredient = <div className={classes.Meat}></div>;\n                break;\n            case ('cheese'):\n                ingredient = <div className={classes.Cheese}></div>;\n                break;\n            case ('salad'):\n                ingredient = <div className={classes.Salad}></div>;\n                break;\n            case ('bacon'):\n                ingredient = <div className={classes.Bacon}></div>;\n                break;\n            default: ingredient = null;\n        }\n\n        return ingredient;\n    }\n};\n\n// ensures that the property type must be a string and is required.\nBurgerIngredient.propTypes = {\n    type: PropTypes.string.isRequired\n}\n\nexport default BurgerIngredient;","import React from 'react';\n\nimport classes from './Burger.css';\n\nimport withClass from '../../hoc/withClass';\nimport Aux from '../../hoc/Aux';\n\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\n\nconst Burger = props => {\n    const transformedIngredients = Object.keys(props.ingredients).map(ingKey => {\n        // returns an array of the respective ingredient value.\n        // the \"Array()\" method will create something like [cheese, cheese], \n        // which is the given number value for that ingredient\n        return [...Array(props.ingredients[ingKey])].map((_, index) =>  // then, maps them/it into components \n            <BurgerIngredient key={ingKey + index} type={ingKey} />\n        );\n    }); // \"Object.keys\" turns an object's keys into an array\n\n    return (\n        <Aux>\n            <BurgerIngredient type='bread-top' />\n            {transformedIngredients}\n            <BurgerIngredient type='bread-bottom' />\n        </Aux>\n    );\n}\n\nexport default withClass(Burger, classes.Burger); ","import React, { Component } from 'react';\n\nimport Burger from '../../components/Burger/Burger';\n\nimport Aux from '../../hoc/Aux';\n\nclass BurgerBuilder extends Component {\n\n    state = {\n        ingredients: {\n            salad: 1,\n            bacon: 1,\n            cheese: 2,\n            meat: 2\n        },\n        purchased: true,\n        totalPrice: 0\n    };\n\n    render() {\n\n        return (\n            <Aux>\n                <Burger ingredients={this.state.ingredients} />\n                <p>Build Controls</p>\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;","import React from 'react';\nimport classes from './App.css';\n\nimport Layout from '../components/Layout/Layout';\nimport BurgerBuilder from './BurgerBuilder/BurgerBuilder';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <Layout>\n        <BurgerBuilder />\n      </Layout>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}